import { BigInteger, SecureRandom } from 'jsbn';
import { isValid, derive } from './GenCredentials';
import { Group } from './Model';

const g = new BigInteger(
    "2402352677501852209227687703532399932712287657378364916510075318787663274146353219320285676155269678799694668298749389095083896573425601900601068477164491735474137283104610458681314511781646755400527402889846139864532661215055797097162016168270312886432456663834863635782106154918419982534315189740658186868651151358576410138882215396016043228843603930989333662772848406593138406010231675095763777982665103606822406635076697764025346253773085133173495194248967754052573659049492477631475991575198775177711481490920456600205478127054728238140972518639858334115700568353695553423781475582491896050296680037745308460627");

const p = new BigInteger(
    "20694785691422546401013643657505008064922989295751104097100884787057374219242717401922237254497684338129066633138078958404960054389636289796393038773905722803605973749427671376777618898589872735865049081167099310535867780980030790491654063777173764198678527273474476341835600035698305193144284561701911000786737307333564123971732897913240474578834468260652327974647951137672658693582180046317922073668860052627186363386088796882120769432366149491002923444346373222145884100586421050242120365433561201320481118852408731077014151666200162313177169372189248078507711827842317498073276598828825169183103125680162072880719");

const q = new BigInteger("78571733251071885079927659812671450121821421258408794611510081919805623223441");

const group: Group = { g, p, q };

describe('GenerateCredentials', () => {
    test('should derive public key', () => {
        const password = 'NYC-SgM-axC-fCu-pvP';
        const salt = 'deT9e32LvYeDzg';
        const pub = derive(password, salt, group);
        expect(pub.toString()).toEqual('18667433505891368444045681325118240780405413018316493595944581691395145795469910988018109282526836201431377145866938727438337586676882723360013990050927636596691479841881190944139233579365430124720754185764408528755973078066310572602927484461363076614780455134342898235367140064537201194778176569237605603479012862200552645175160468150869968164502986855792639330286141968255374480179981074520018482845319714457416318209431743934366799385354652712072062212321719192256473038054222098698853696430702846645496164890685457434787351103800389525349979380810417855564866389400639709847784591992025398763557606403431736347696');
    });

    test('should validate checksum', () => {
        const privCred = 'NYC-SgM-axC-fCu-pvP';
        expect(isValid(privCred)).toBeTruthy();
    });
});
